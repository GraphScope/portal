"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1825],{66913:function(e,n,r){var t;r.r(n),r.d(n,{demos:function(){return l}});var o,a=r(90228),s=r.n(a),i=r(87999),u=r.n(i),p=r(50959),c=(r(85834),r(99300)),d=r(2268),l={"icons-demo-en-us-0":{component:p.memo(p.lazy(u()(s()().mark((function e(){var n,t,o,a,i,u;return s()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.resolve().then(r.t.bind(r,50959,19));case 2:return n=e.sent,t=n.default,n.useState,e.next=7,Promise.resolve().then(r.bind(r,99300));case 7:return o=e.sent,a=o.Space,e.next=11,Promise.resolve().then(r.bind(r,2268));case 11:return i=e.sent,u=i.Icons,e.abrupt("return",{default:function(){return t.createElement("div",null,t.createElement(a,null,t.createElement(u.AddNode,null),t.createElement(u.PrimaryKey,{style:{color:"red"}}),t.createElement(u.Sidebar,null),t.createElement(u.Sidebar,{revert:!0}),t.createElement(u.Lasso,null)))}});case 14:case"end":return e.stop()}}),e)}))))),asset:{type:"BLOCK",id:"icons-demo-en-us-0",refAtomIds:["Icons"],dependencies:{"index.jsx":{type:"FILE",value:"import React, { useState } from 'react';\nimport { Space } from 'antd';\nimport { Icons } from '@graphscope/studio-components';\nexport default () => {\n  return (\n    <div>\n      <Space>\n        <Icons.AddNode />\n        <Icons.PrimaryKey style={{ color: 'red' }} />\n        <Icons.Sidebar />\n        <Icons.Sidebar revert />\n        <Icons.Lasso />\n      </Space>\n    </div>\n  );\n};"},react:{type:"NPM",value:"18.2.0"},antd:{type:"NPM",value:"5.22.2"},"@graphscope/studio-components":{type:"NPM",value:"0.1.18"}},entry:"index.jsx"},context:{react:t||(t=r.t(p,2)),antd:c,"@graphscope/studio-components":d},renderOpts:{compile:(o=u()(s()().mark((function e(){var n,t=arguments;return s()().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([r.e(5872),r.e(1128)]).then(r.bind(r,61128));case 2:return e.abrupt("return",(n=e.sent).default.apply(n,t));case 3:case"end":return e.stop()}}),e)}))),function(){return o.apply(this,arguments)})}}}},36904:function(e,n,r){r.r(n),r.d(n,{demos:function(){return t}});r(50959),r(40441);var t={}},1329:function(e,n,r){r.r(n),r.d(n,{demos:function(){return t}});r(50959),r(42816);var t={}},17432:function(e,n,r){r.r(n),r.d(n,{texts:function(){return t}});r(85834);const t=[]},98339:function(e,n,r){r.r(n),r.d(n,{texts:function(){return t}});r(40441);const t=[]},61764:function(e,n,r){r.r(n),r.d(n,{texts:function(){return t}});r(42816);const t=[{value:"@graphscope/studio-components",paraId:0},{value:"@graphscope/studio-components",paraId:1,tocIndex:1},{value:" is a component library based on GraphScope Portal, helping developers quickly build graph applications.\n",paraId:1,tocIndex:1},{value:"@graphscope/studio-importor",paraId:0},{value:"@graphscope/studio-importor",paraId:2,tocIndex:2},{value:" is a data modeling module based on GraphScope Portal, allowing users to manually drag and drop to model, easily creating graph nodes, edges, and attributes. It supports CSV and SQL DDL import for modeling, giving users the freedom to design graph models as if on a whiteboard.",paraId:2,tocIndex:2},{value:"Online Experience: ",paraId:3},{value:"Modeling",paraId:4},{value:"import React, { useState, useEffect } from 'react';\nimport ModelingApp from '@graphscope/studio-importor';\nexport default () => {\n  return (\n    <div>\n      <ModelingApp />\n    </div>\n  );\n};\n",paraId:5},{value:"@graphscope/studio-query",paraId:0},{value:"@graphscope/studio-query",paraId:6,tocIndex:3},{value:" is a data querying module based on GraphScope Portal, allowing users to query graph data by connecting to the engine address with a single click. It supports Cypher/Gremlin syntax, historical queries, and intelligent queries, making data querying easy and hassle-free for users.",paraId:6,tocIndex:3},{value:"在线体验：",paraId:7},{value:"Query",paraId:8},{value:"\nimport QueryApp from '@graphscope/studio-query';\nimport { Utils } from '@graphscope/studio-components';\nconst { storage } = Utils;\n\nexport default () => {\n  const queryInfo = () => {\n    return new Promise(resolve => {\n      resolve({\n        graph_name: 'demo',\n      });\n    });\n  };\n  const queryGraphSchema = () => {\n    return new Promise(resolve => {\n      resolve({\n        nodes: [],\n        edges: [],\n      });\n    });\n  };\n  const queryStatements = () => {\n    return new Promise(resolve => {\n      resolve([]);\n    });\n  };\n  const { GS_ENGINE_TYPE } = window;\n  const language = GS_ENGINE_TYPE === 'groot' ? 'gremlin' : 'cypher';\n  const globalScript = GS_ENGINE_TYPE === 'groot' ? 'g.V().limit 10' : 'Match (n) return n limit 10';\n\n  const locale = storage.get('locale') || 'en-US';\n  const primaryColor = storage.get('primaryColor') || '#1978FF';\n  const themeMode = storage.get('themeColor') || 'defaultAlgorithm';\n\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: '65px',\n        left: '0px',\n        right: '0px',\n        zIndex: 999,\n        bottom: '0px',\n        background: '#fff',\n      }}\n    >\n      <QueryApp\n        /** 主题相关 */\n        theme={{ mode: themeMode, primaryColor }}\n        /** 国际化 */\n        locale={locale}\n        /** 返回导航 */\n        globalScript={globalScript}\n        language={language}\n        queryInfo={queryInfo}\n        queryGraphSchema={queryGraphSchema}\n        queryStatements={queryStatements}\n      />\n    </div>\n  );\n};\n```\n\n\n",paraId:9}]}}]);